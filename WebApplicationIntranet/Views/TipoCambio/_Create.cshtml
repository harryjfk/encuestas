@using System.Globalization
@using System.Threading
@model Entity.TipoCambio
@{
    Layout = "";
    CultureInfo cultureInfo = Thread.CurrentThread.CurrentCulture;
    TextInfo textInfo = cultureInfo.TextInfo;
    var mes = Model.fecha.ToString("MMMM", CultureInfo.GetCultureInfo("ES"));
    var title = "Tipo de Cambio del Mes: " +textInfo.ToTitleCase(mes);
}
@using (Html.BeginForm("Create", "TipoCambio", FormMethod.Post, new { name = "Ti-635733798421580056" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">


        <div id="errors-container" class="alert alert-danger animated bounceIn hidden">
            <strong>Alertas</strong>
            <div>
                <ul></ul>
            </div>
        </div>



        @if (Model != null)
        {
            <input type="hidden" name="Id" value="@Model.Id" />
        }
        
        <div class="form-group">
            <label for="Año" class="col-md-4 control-label"> Año</label>
            <div class="col-md-7">
                @Html.Label(Model.fecha.Year.ToString(), new { @class = "form-control", style = "max-width: 280px;" })
                @Html.ValidationMessageFor(model => model.Año)
            </div>
           
        </div>
        
        <div class="form-group">
            <label for="tipo_cambio_ventas" class="col-md-4 control-label"> Tipo de Cambio Venta</label>
            <div class="col-md-7">
                @Html.TextBoxFor(t => t.tipo_cambio_ventas, new { @class = "form-control mask4" , Value =Model.tipo_cambio_ventas.ToString("0.0000", CultureInfo.InvariantCulture)})
                @Html.ValidationMessageFor(model => model.tipo_cambio_ventas)
            </div>
            <div class="col-md-1 txt-color-red"><span>(*)</span></div>
        </div>
        
        <div class="form-group">
            <label for="tipo_cambio_compra" class="col-md-4 control-label"> Tipo de Cambio Compra</label>
            <div class="col-md-7">
                @Html.TextBoxFor(t => t.tipo_cambio_compra, new { @class = "form-control mask4", Value =Model.tipo_cambio_compra.ToString("0.0000",CultureInfo.InvariantCulture)})
                @Html.ValidationMessageFor(model => model.tipo_cambio_compra)
            </div>
            <div class="col-md-1 txt-color-red"><span>(*)</span></div>
        </div>

        <div class="form-group">
            <label for="Activado" class="col-md-4 control-label">Activado</label>
            <div class="col-md-1">
                @Html.CheckBoxFor(t => t.Activado, new { @class = "form-control check-small" })
                @Html.ValidationMessageFor(model => model.Activado)
            </div>
        </div>

        <div class="modal-footer">
            <button type="button" name="aceptarbtn" class="btn btn-primary" value="Aceptar">Aceptar</button>
            <button type="button" class="btn btn-default" data-dismiss="modal">Cancelar</button>
        </div>

    </div>
}

<script type="text/javascript">
    $(document).ready(function () {
        $("button[name='aceptarbtn']").click(function () {
            var $elem = $(this);
            $elem.addClass("disabled");
            $.ajax({
                cache: false,
                type: "POST",
                url: $.origin() + "/TipoCambio/CreatePost/",
                data: $("form[name='Ti-635733798421580056']").serialize(),
                success: function (data) {
                    $elem.removeClass("disabled");
                    if (data.Success) {
                        $("#table-container").html(data.Data);
                        $("#editItem").modal("hide");
                        $.smallBox({
                            title: "Confirmación",
                            content: "<i class='fa fa-clock-o'></i> <i>El elemento se guardó correctamente</i>",
                            color: "#659265",
                            iconSmall: "fa fa-check fa-2x fadeInRight animated",
                            timeout: 4000
                        });
                    } else {
                        var errors = "";
                        for (var i = 0; i < data.Errors.length; i++) {
                            errors += "<li>" + data.Errors[i] + "</li>";
                        }
                        $("#errors-container").removeClass("hidden").find("ul").html(errors);
                    }
                    //$("#editItem .modal-body").html(data);
                    //$("#editItem").modal("show");
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    $elem.removeClass("disabled");
                    alert('Failed to retrieve data.');
                }
            });

        });
        var el = $('.modal-dialog .modal-content .modal-header h4')[0];
        $(el).html("@title");
        $(".mask4").inputmask("9{1,20}.9{0,4}");
        $(".mask4").each(function (i, e) {
            $(e).focusout(function () {
                var val = parseFloat($(e).val());
                $(e).val(val.toFixed(4));

            });
        });
    })
</script>
